spring.cloud.config.enabled=false
server.port=8000
spring.application.name=currency-exchange-service

spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
# For >2.5.0
spring.jpa.defer-datasource-initialization=true
spring.h2.console.enabled=true

#Connect currency-exchange-service to Eureka
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka



resilience4j.retry.instances.sample-api.max-attempts=5
resilience4j.retry.instances.sample-api.waitDuration=1s
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#When the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls:
#resilience4j.circuitbreaker.instances.default.failure-rate-threshold=90

#The number of permissions available during one limit refresh period
#For example, you want to restrict the calling rate of some methods to be not higher than 2 req/ms.
resilience4j.ratelimiter.instances.default.limit-for-period=2 

#The period of a limit refresh. After each period the rate limiter sets its permissions count back to the limitForPeriod value
resilience4j.ratelimiter.instances.default.limit-refresh-period=10s

#Max amount of parallel executions allowed by the bulkhead
resilience4j.bulkhead.instances.sample-api.max-concurrent-calls=10

#Is used to specify how much information needs to be sent to Zipkin.
#By default Spring Cloud Sleuth sets all spans to non-exportable. 
#That means that traces appear in logs but not in any remote store. 
#A Value of 1.0 would mean 100% of all times. And a value of 0.1 would mean only 10%. 
#If you want to make sure that all spans are sent to Zipkin,
#provide a value of 1.0 here.
spring.sleuth.sampler.probability=1.0

